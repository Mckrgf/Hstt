package com.example.yb.hstt.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.yb.hstt.dao.bean.DeviceInfos;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_INFOS".
*/
public class DeviceInfosDao extends AbstractDao<DeviceInfos, Long> {

    public static final String TABLENAME = "DEVICE_INFOS";

    /**
     * Properties of entity DeviceInfos.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property Dev_id = new Property(1, String.class, "dev_id", false, "DEV_ID");
        public final static Property Img_url = new Property(2, String.class, "img_url", false, "IMG_URL");
        public final static Property State = new Property(3, int.class, "state", false, "STATE");
    }


    public DeviceInfosDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceInfosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_INFOS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: ID
                "\"DEV_ID\" TEXT," + // 1: dev_id
                "\"IMG_URL\" TEXT," + // 2: img_url
                "\"STATE\" INTEGER NOT NULL );"); // 3: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_INFOS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceInfos entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String dev_id = entity.getDev_id();
        if (dev_id != null) {
            stmt.bindString(2, dev_id);
        }
 
        String img_url = entity.getImg_url();
        if (img_url != null) {
            stmt.bindString(3, img_url);
        }
        stmt.bindLong(4, entity.getState());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceInfos entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String dev_id = entity.getDev_id();
        if (dev_id != null) {
            stmt.bindString(2, dev_id);
        }
 
        String img_url = entity.getImg_url();
        if (img_url != null) {
            stmt.bindString(3, img_url);
        }
        stmt.bindLong(4, entity.getState());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeviceInfos readEntity(Cursor cursor, int offset) {
        DeviceInfos entity = new DeviceInfos( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dev_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // img_url
            cursor.getInt(offset + 3) // state
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceInfos entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDev_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImg_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setState(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeviceInfos entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeviceInfos entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceInfos entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
